<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.finance.cryptoCoin.notice.mapper.CryptoCoinPriceNoticeMapper">
  <resultMap id="BaseResultMap" type="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="coin_type" jdbcType="INTEGER" property="coinType" />
    <result column="currency_type" jdbcType="INTEGER" property="currencyType" />
    <result column="max_price" jdbcType="DECIMAL" property="maxPrice" />
    <result column="min_price" jdbcType="DECIMAL" property="minPrice" />
    <result column="time_unit" jdbcType="INTEGER" property="timeUnit" />
    <result column="time_range" jdbcType="INTEGER" property="timeRange" />
    <result column="fluctuation_speed_percentage" jdbcType="DECIMAL" property="fluctuationSpeedPercentage" />
    <result column="email" jdbcType="CHAR" property="email" />
    <result column="valid_time" jdbcType="TIMESTAMP" property="validTime" />
    <result column="notice_time" jdbcType="TIMESTAMP" property="noticeTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="is_delete" jdbcType="BIT" property="isDelete" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, coin_type, currency_type, max_price, min_price, time_unit, time_range, fluctuation_speed_percentage, 
    email, valid_time, notice_time, create_time, is_delete
  </sql>
  <select id="selectByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from crypto_coin_price_notice
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample">
    delete from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    insert into crypto_coin_price_notice (id, coin_type, currency_type, 
      max_price, min_price, time_unit, 
      time_range, fluctuation_speed_percentage, 
      email, valid_time, notice_time, 
      create_time, is_delete)
    values (#{id,jdbcType=BIGINT}, #{coinType,jdbcType=INTEGER}, #{currencyType,jdbcType=INTEGER}, 
      #{maxPrice,jdbcType=DECIMAL}, #{minPrice,jdbcType=DECIMAL}, #{timeUnit,jdbcType=INTEGER}, 
      #{timeRange,jdbcType=INTEGER}, #{fluctuationSpeedPercentage,jdbcType=DECIMAL}, 
      #{email,jdbcType=CHAR}, #{validTime,jdbcType=TIMESTAMP}, #{noticeTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{isDelete,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    insert into crypto_coin_price_notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="coinType != null">
        coin_type,
      </if>
      <if test="currencyType != null">
        currency_type,
      </if>
      <if test="maxPrice != null">
        max_price,
      </if>
      <if test="minPrice != null">
        min_price,
      </if>
      <if test="timeUnit != null">
        time_unit,
      </if>
      <if test="timeRange != null">
        time_range,
      </if>
      <if test="fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="validTime != null">
        valid_time,
      </if>
      <if test="noticeTime != null">
        notice_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="coinType != null">
        #{coinType,jdbcType=INTEGER},
      </if>
      <if test="currencyType != null">
        #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="maxPrice != null">
        #{maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="minPrice != null">
        #{minPrice,jdbcType=DECIMAL},
      </if>
      <if test="timeUnit != null">
        #{timeUnit,jdbcType=INTEGER},
      </if>
      <if test="timeRange != null">
        #{timeRange,jdbcType=INTEGER},
      </if>
      <if test="fluctuationSpeedPercentage != null">
        #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="email != null">
        #{email,jdbcType=CHAR},
      </if>
      <if test="validTime != null">
        #{validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="noticeTime != null">
        #{noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultType="java.lang.Long">
    select count(*) from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update crypto_coin_price_notice
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.coinType != null">
        coin_type = #{record.coinType,jdbcType=INTEGER},
      </if>
      <if test="record.currencyType != null">
        currency_type = #{record.currencyType,jdbcType=INTEGER},
      </if>
      <if test="record.maxPrice != null">
        max_price = #{record.maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.minPrice != null">
        min_price = #{record.minPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.timeUnit != null">
        time_unit = #{record.timeUnit,jdbcType=INTEGER},
      </if>
      <if test="record.timeRange != null">
        time_range = #{record.timeRange,jdbcType=INTEGER},
      </if>
      <if test="record.fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage = #{record.fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=CHAR},
      </if>
      <if test="record.validTime != null">
        valid_time = #{record.validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.noticeTime != null">
        notice_time = #{record.noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update crypto_coin_price_notice
    set id = #{record.id,jdbcType=BIGINT},
      coin_type = #{record.coinType,jdbcType=INTEGER},
      currency_type = #{record.currencyType,jdbcType=INTEGER},
      max_price = #{record.maxPrice,jdbcType=DECIMAL},
      min_price = #{record.minPrice,jdbcType=DECIMAL},
      time_unit = #{record.timeUnit,jdbcType=INTEGER},
      time_range = #{record.timeRange,jdbcType=INTEGER},
      fluctuation_speed_percentage = #{record.fluctuationSpeedPercentage,jdbcType=DECIMAL},
      email = #{record.email,jdbcType=CHAR},
      valid_time = #{record.validTime,jdbcType=TIMESTAMP},
      notice_time = #{record.noticeTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_delete = #{record.isDelete,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    update crypto_coin_price_notice
    <set>
      <if test="coinType != null">
        coin_type = #{coinType,jdbcType=INTEGER},
      </if>
      <if test="currencyType != null">
        currency_type = #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="maxPrice != null">
        max_price = #{maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="minPrice != null">
        min_price = #{minPrice,jdbcType=DECIMAL},
      </if>
      <if test="timeUnit != null">
        time_unit = #{timeUnit,jdbcType=INTEGER},
      </if>
      <if test="timeRange != null">
        time_range = #{timeRange,jdbcType=INTEGER},
      </if>
      <if test="fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage = #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=CHAR},
      </if>
      <if test="validTime != null">
        valid_time = #{validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="noticeTime != null">
        notice_time = #{noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    update crypto_coin_price_notice
    set coin_type = #{coinType,jdbcType=INTEGER},
      currency_type = #{currencyType,jdbcType=INTEGER},
      max_price = #{maxPrice,jdbcType=DECIMAL},
      min_price = #{minPrice,jdbcType=DECIMAL},
      time_unit = #{timeUnit,jdbcType=INTEGER},
      time_range = #{timeRange,jdbcType=INTEGER},
      fluctuation_speed_percentage = #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      email = #{email,jdbcType=CHAR},
      valid_time = #{validTime,jdbcType=TIMESTAMP},
      notice_time = #{noticeTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_delete = #{isDelete,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>