<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.article.mapper.ArticleUserDetailMapper">

  <resultMap id="BaseResultMap" type="demo.article.pojo.po.ArticleUserDetail">
    <result column="article_channel_id" jdbcType="INTEGER" property="articleChannelId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="coefficient" jdbcType="INTEGER" property="coefficient" />
    <result column="daily_channel_post_limit" jdbcType="INTEGER" property="dailyChannelPostLimit" />
    <result column="daily_post_limit" jdbcType="INTEGER" property="dailyPostLimit" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="post_limit_update_time" jdbcType="TIMESTAMP" property="postLimitUpdateTime" />
    <result column="is_flash" jdbcType="BIT" property="isFlash" />
    <result column="is_flash_update_time" jdbcType="TIMESTAMP" property="isFlashUpdateTime" />
    <result column="like_channel_count" jdbcType="INTEGER" property="likeChannelCount" />
    <result column="like_channel_update_time" jdbcType="TIMESTAMP" property="likeChannelUpdateTime" />
    <result column="hate_channel_count" jdbcType="INTEGER" property="hateChannelCount" />
    <result column="hate_channel_update_time" jdbcType="TIMESTAMP" property="hateChannelUpdateTime" />
  </resultMap>

  <insert id="insert" parameterType="demo.article.pojo.po.ArticleUserDetail">
    insert into article_user_detail (article_channel_id, user_id, coefficient, 
      daily_channel_post_limit, daily_post_limit, 
      create_time, post_limit_update_time, is_flash, 
      is_flash_update_time, like_channel_count, 
      like_channel_update_time, hate_channel_count, 
      hate_channel_update_time)
    values (#{articleChannelId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{coefficient,jdbcType=INTEGER}, 
      #{dailyChannelPostLimit,jdbcType=INTEGER}, #{dailyPostLimit,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{postLimitUpdateTime,jdbcType=TIMESTAMP}, #{isFlash,jdbcType=BIT}, 
      #{isFlashUpdateTime,jdbcType=TIMESTAMP}, #{likeChannelCount,jdbcType=INTEGER}, 
      #{likeChannelUpdateTime,jdbcType=TIMESTAMP}, #{hateChannelCount,jdbcType=INTEGER}, 
      #{hateChannelUpdateTime,jdbcType=TIMESTAMP})
  </insert>

  <insert id="insertSelective" parameterType="demo.article.pojo.po.ArticleUserDetail">
    insert into article_user_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleChannelId != null">
        article_channel_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="coefficient != null">
        coefficient,
      </if>
      <if test="dailyChannelPostLimit != null">
        daily_channel_post_limit,
      </if>
      <if test="dailyPostLimit != null">
        daily_post_limit,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="postLimitUpdateTime != null">
        post_limit_update_time,
      </if>
      <if test="isFlash != null">
        is_flash,
      </if>
      <if test="isFlashUpdateTime != null">
        is_flash_update_time,
      </if>
      <if test="likeChannelCount != null">
        like_channel_count,
      </if>
      <if test="likeChannelUpdateTime != null">
        like_channel_update_time,
      </if>
      <if test="hateChannelCount != null">
        hate_channel_count,
      </if>
      <if test="hateChannelUpdateTime != null">
        hate_channel_update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleChannelId != null">
        #{articleChannelId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="coefficient != null">
        #{coefficient,jdbcType=INTEGER},
      </if>
      <if test="dailyChannelPostLimit != null">
        #{dailyChannelPostLimit,jdbcType=INTEGER},
      </if>
      <if test="dailyPostLimit != null">
        #{dailyPostLimit,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="postLimitUpdateTime != null">
        #{postLimitUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isFlash != null">
        #{isFlash,jdbcType=BIT},
      </if>
      <if test="isFlashUpdateTime != null">
        #{isFlashUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likeChannelCount != null">
        #{likeChannelCount,jdbcType=INTEGER},
      </if>
      <if test="likeChannelUpdateTime != null">
        #{likeChannelUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="hateChannelCount != null">
        #{hateChannelCount,jdbcType=INTEGER},
      </if>
      <if test="hateChannelUpdateTime != null">
        #{hateChannelUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <insert id="insertOrUpdateUserCoefficient">
    insert into
      article_user_detail
      (article_channel_id, user_id, coefficient)
    values
      (#{articleChannelId}, #{userId}, #{coefficient})
    on duplicate key
      update 
        coefficient = coefficient + #{coefficient}
  </insert>

  <insert id="insertOrUpdateUserDailyPostLimit">
    insert into
      article_user_detail
      (article_channel_id, user_id, post_limit_update_time
      <if test="dailyChannelPostLimit != null">
        , daily_channel_post_limit
      </if>
      <if test="dailyPostLimit != null">
        , daily_post_limit
      </if>
      )
    values
      (#{articleChannelId}, #{userId}, now()
      <if test="dailyChannelPostLimit != null">
        , #{dailyChannelPostLimit}
      </if>
      <if test="dailyPostLimit != null">
        , #{dailyPostLimit}
      </if>
      )
    on duplicate key
      update 
        post_limit_update_time = now()
        <if test="dailyChannelPostLimit != null">
          , daily_channel_post_limit = #{dailyChannelPostLimit}
        </if>
        <if test="dailyPostLimit != null">
          , daily_post_limit = #{dailyPostLimit}
        </if>
  </insert>

  <select id="findArticleUserChannelResultBO" resultType="demo.article.pojo.bo.ArticleUserChannelResultBO">
    select
      atcs.channel_id as articleChannelId,
      atcs.weights as weights,
      atcs.channel_type as channelType,
      aud.user_id as userId,
      ifnull(aud.coefficient, 0) as coefficient,
      (aud.is_flash or atcs.is_flash) as flash,
      aud.is_flash_update_time as isFlashUpdateTime,
      atcs.channel_name as channelName,
      atcs.channel_point channelPoint,
      atcs.channel_flash_point as channelFlashPoint,
      atcs.image

    from
      article_channels as atcs
      
      left join article_user_detail as aud
        on atcs.channel_id = aud.article_channel_id
        and (aud.user_id = #{userId} or aud.user_id is null)

    <where>
      atcs.channel_type in(1, 2)
      and atcs.is_delete = false
      and (aud.user_id = #{userId} or aud.user_id is null)
    </where>
  </select>

  <update id="updateArticleUserDetail">
    update
      article_user_detail
    <set>
      <if test="isFlash != null">
        is_flash = #{isFlash},
      </if>
      <if test="coefficient != null">
        coefficient = coefficient + #{coefficient},
      </if>
      <if test="isFlashUpdateTime != null">
        is_flash_update_time = #{isFlashUpdateTime},
      </if>
      <if test="likeCount != null">
        like_channel_count = like_channel_count + 1,
        like_channel_update_time = now(),
      </if>
      <if test="hateCount != null">
        hate_channel_count = hate_channel_count + 1,
        hate_channel_update_time = now(),
      </if>
      <if test="dailyChannelPostLimit != null">
        daily_channel_post_limit = #{dailyChannelPostLimit},
        post_limit_update_time = now()
      </if>
    </set>
    where
      user_id = #{userId}
      and article_channel_id = #{articleChannelId}
  </update>

  <insert id="batchUpdateFlashStatu">
    <foreach item="param" index="index" collection="list"
        open="" separator=";" close="">
    insert into
      article_user_detail(
        article_channel_id, 
        user_id, 
        is_flash
        <if test="param.dailyChannelPostLimit != null">
          , daily_channel_post_limit
          , post_limit_update_time
        </if>
        )
    values(
      #{param.articleChannelId}, 
      #{param.userId}, 
      #{param.isFlash}
      <if test="param.dailyChannelPostLimit != null">
        , #{param.dailyChannelPostLimit}
        , now()
      </if>
      )
    on duplicate key update
      is_flash = #{param.isFlash}, is_flash_update_time = now()
      <if test="param.dailyChannelPostLimit != null">
        , daily_channel_post_limit = #{param.dailyChannelPostLimit}
      </if>
    </foreach>
  </insert>

  <update id="updateArticleUserCoefficient">
    update
      article_user_detail as aud

    set
      aud.coefficient = aud.coefficient + #{coefficient}

    where
      aud.article_channel_id = #{channelId}
      and aud.user_id = #{userId}
  </update>

  <insert id="batchUpdateArticleUserCoefficient">
    <foreach item="param" index="index" collection="list"
        open="" separator=";" close="">
    insert into
      article_user_detail(
        article_channel_id, 
        user_id, 
        coefficient
        )
    values(
      #{param.channelId}, 
      #{param.userId}, 
      #{param.coefficient}
      )
    on duplicate key update
      coefficient = coefficient + #{param.coefficient}
    </foreach>
  </insert>

  <select id="findArticleUserPostLimit" resultType="int">
    select
      aud.daily_channel_post_limit 
    from
      article_user_detail as aud
    where
      aud.user_id = #{userId}
      and aud.article_channel_id = #{channelId}
  </select>

  <update id="updateArticleUserPostLimit">
    update
      article_user_detail
    set
      daily_channel_post_limit = #{newPostLimit},
      post_limit_update_time = now()
    where
      user_id = #{userId}
      and article_channel_id = #{channelId}
  </update>

  <select id="findArticleUserDetailByUserIdChannelId" resultMap="BaseResultMap">
    select
      *
    from
      article_user_detail
    where
      user_id = #{userId}
      and article_channel_id = #{channelId}
  </select>

  <select id="findChannelIdListByUserId" resultType="Integer">
    SELECT 
      ac.channel_id
        
    FROM
      article_user_detail as aud
        
      left join article_channels as ac
        on aud.article_channel_id = ac.channel_id
    
    where
      1=1
      and aud.user_id = #{userId}
      and (aud.is_flash = 1 or ac.channel_type = 0)
  </select>
</mapper>