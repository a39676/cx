<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.finance.bank.mapper.BankUnionMapper">

  <resultMap id="BaseResultMap" type="demo.finance.bank.pojo.po.BankUnion">
    <result column="bank_union_id" jdbcType="BIGINT" property="bankUnionId" />
    <result column="bank_union_ename" jdbcType="CHAR" property="bankUnionEname" />
    <result column="bank_union_ename_short" jdbcType="CHAR" property="bankUnionEnameShort" />
    <result column="bank_union_chinese_name" jdbcType="CHAR" property="bankUnionChineseName" />
    <result column="bank_union_chinese_name_short" jdbcType="CHAR" property="bankUnionChineseNameShort" />
    <result column="common_bank_union" jdbcType="BIT" property="commonBankUnion" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    bank_union_id, bank_union_ename, bank_union_ename_short, bank_union_chinese_name, 
    bank_union_chinese_name_short, common_bank_union
  </sql>
  <select id="selectByExample" parameterType="demo.finance.bank.pojo.po.example.BankUnionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bank_union
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="demo.finance.bank.pojo.po.example.BankUnionExample">
    delete from bank_union
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="demo.finance.bank.pojo.po.BankUnion">
    insert into bank_union (bank_union_id, bank_union_ename, bank_union_ename_short, 
      bank_union_chinese_name, bank_union_chinese_name_short, 
      common_bank_union)
    values (#{bankUnionId,jdbcType=BIGINT}, #{bankUnionEname,jdbcType=CHAR}, #{bankUnionEnameShort,jdbcType=CHAR}, 
      #{bankUnionChineseName,jdbcType=CHAR}, #{bankUnionChineseNameShort,jdbcType=CHAR}, 
      #{commonBankUnion,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="demo.finance.bank.pojo.po.BankUnion">
    insert into bank_union
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bankUnionId != null">
        bank_union_id,
      </if>
      <if test="bankUnionEname != null">
        bank_union_ename,
      </if>
      <if test="bankUnionEnameShort != null">
        bank_union_ename_short,
      </if>
      <if test="bankUnionChineseName != null">
        bank_union_chinese_name,
      </if>
      <if test="bankUnionChineseNameShort != null">
        bank_union_chinese_name_short,
      </if>
      <if test="commonBankUnion != null">
        common_bank_union,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bankUnionId != null">
        #{bankUnionId,jdbcType=BIGINT},
      </if>
      <if test="bankUnionEname != null">
        #{bankUnionEname,jdbcType=CHAR},
      </if>
      <if test="bankUnionEnameShort != null">
        #{bankUnionEnameShort,jdbcType=CHAR},
      </if>
      <if test="bankUnionChineseName != null">
        #{bankUnionChineseName,jdbcType=CHAR},
      </if>
      <if test="bankUnionChineseNameShort != null">
        #{bankUnionChineseNameShort,jdbcType=CHAR},
      </if>
      <if test="commonBankUnion != null">
        #{commonBankUnion,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="demo.finance.bank.pojo.po.example.BankUnionExample" resultType="java.lang.Long">
    select count(*) from bank_union
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bank_union
    <set>
      <if test="record.bankUnionId != null">
        bank_union_id = #{record.bankUnionId,jdbcType=BIGINT},
      </if>
      <if test="record.bankUnionEname != null">
        bank_union_ename = #{record.bankUnionEname,jdbcType=CHAR},
      </if>
      <if test="record.bankUnionEnameShort != null">
        bank_union_ename_short = #{record.bankUnionEnameShort,jdbcType=CHAR},
      </if>
      <if test="record.bankUnionChineseName != null">
        bank_union_chinese_name = #{record.bankUnionChineseName,jdbcType=CHAR},
      </if>
      <if test="record.bankUnionChineseNameShort != null">
        bank_union_chinese_name_short = #{record.bankUnionChineseNameShort,jdbcType=CHAR},
      </if>
      <if test="record.commonBankUnion != null">
        common_bank_union = #{record.commonBankUnion,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bank_union
    set bank_union_id = #{record.bankUnionId,jdbcType=BIGINT},
      bank_union_ename = #{record.bankUnionEname,jdbcType=CHAR},
      bank_union_ename_short = #{record.bankUnionEnameShort,jdbcType=CHAR},
      bank_union_chinese_name = #{record.bankUnionChineseName,jdbcType=CHAR},
      bank_union_chinese_name_short = #{record.bankUnionChineseNameShort,jdbcType=CHAR},
      common_bank_union = #{record.commonBankUnion,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <select id="searchBankUnion" resultMap="BaseResultMap">
    select 
      *
    from
      bank_union
    <where>
      <if test="bankUnionName != null">
        and bank_union_ename_short like concat(#{bankUnionName}, %)
      </if>
      <if test="bankUnionId != null">
        and bank_union_id = #{bankUnionId}
      </if>
      <if test="commonBankUnion != null and commonBankUnion == true">
        and common_bank_union = 1
      </if>
    </where>
  </select>

  <select id="findBankUnionByCondition" resultMap="BaseResultMap">
    select
      *
    from
      bank_union

    <where>
      <if test="bankUnionId != null">
        and bank_union_id = #{bankUnionId}
      </if>
      <if test="bankUnionEname != null">
        and bank_union_ename = #{bankUnionEname}
      </if>
      <if test="bankUnionEnameShort != null">
        and bank_union_ename_short = #{bankUnionEnameShort}
      </if>
      <if test="bankUnionChineseName != null">
        and bank_union_chinese_name = #{bankUnionChineseName}
      </if>
      <if test="bankUnionChineseNameShort != null">
        and bank_union_chinese_name_short = #{bankUnionChineseNameShort}
      </if>
      <if test="fuzzyBankUnionName != null">
        and (
          bank_union_ename like concat('%', #{fuzzyBankUnionName}, '%')
          or bank_union_ename_short like concat('%', #{fuzzyBankUnionName}, '%')
          or bank_union_chinese_name like concat('%', #{fuzzyBankUnionName}, '%')
          or bank_union_chinese_name_short like concat('%', #{fuzzyBankUnionName}, '%')
        )
      </if>
      <if test="commonBankUnion != null">
        and common_bank_union = #{commonBankUnion}
      </if>
    </where>
  </select>

  <select id="getCommonBankUnionList" resultMap="BaseResultMap">
    select 
      *
    from
      bank_union
    where
      common_bank_union = 1
  </select>

</mapper>