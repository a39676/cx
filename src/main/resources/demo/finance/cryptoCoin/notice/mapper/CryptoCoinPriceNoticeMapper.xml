<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.finance.cryptoCoin.notice.mapper.CryptoCoinPriceNoticeMapper">
  <resultMap id="BaseResultMap" type="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="coin_type" jdbcType="BIGINT" property="coinType" />
    <result column="currency_type" jdbcType="INTEGER" property="currencyType" />
    <result column="max_price" jdbcType="DECIMAL" property="maxPrice" />
    <result column="min_price" jdbcType="DECIMAL" property="minPrice" />
    <result column="time_unit_of_data_watch" jdbcType="INTEGER" property="timeUnitOfDataWatch" />
    <result column="time_range_of_data_watch" jdbcType="INTEGER" property="timeRangeOfDataWatch" />
    <result column="fluctuation_speed_percentage" jdbcType="DECIMAL" property="fluctuationSpeedPercentage" />
    <result column="telegram_chat_record_id" jdbcType="BIGINT" property="telegramChatRecordId" />
    <result column="telegram_bot_name" jdbcType="CHAR" property="telegramBotName" />
    <result column="notice_count" jdbcType="INTEGER" property="noticeCount" />
    <result column="time_unit_of_notice_interval" jdbcType="INTEGER" property="timeUnitOfNoticeInterval" />
    <result column="time_range_of_notice_interval" jdbcType="INTEGER" property="timeRangeOfNoticeInterval" />
    <result column="valid_time" jdbcType="TIMESTAMP" property="validTime" />
    <result column="notice_time" jdbcType="TIMESTAMP" property="noticeTime" />
    <result column="next_notice_time" jdbcType="TIMESTAMP" property="nextNoticeTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="is_delete" jdbcType="BIT" property="isDelete" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, coin_type, currency_type, max_price, min_price, time_unit_of_data_watch, time_range_of_data_watch, 
    fluctuation_speed_percentage, telegram_chat_record_id, telegram_bot_name, notice_count, 
    time_unit_of_notice_interval, time_range_of_notice_interval, valid_time, notice_time, 
    next_notice_time, create_time, is_delete
  </sql>
  <select id="selectByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from crypto_coin_price_notice
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample">
    delete from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    insert into crypto_coin_price_notice (id, coin_type, currency_type, 
      max_price, min_price, time_unit_of_data_watch, 
      time_range_of_data_watch, fluctuation_speed_percentage, 
      telegram_chat_record_id, telegram_bot_name, notice_count, 
      time_unit_of_notice_interval, time_range_of_notice_interval, 
      valid_time, notice_time, next_notice_time, 
      create_time, is_delete)
    values (#{id,jdbcType=BIGINT}, #{coinType,jdbcType=BIGINT}, #{currencyType,jdbcType=INTEGER}, 
      #{maxPrice,jdbcType=DECIMAL}, #{minPrice,jdbcType=DECIMAL}, #{timeUnitOfDataWatch,jdbcType=INTEGER}, 
      #{timeRangeOfDataWatch,jdbcType=INTEGER}, #{fluctuationSpeedPercentage,jdbcType=DECIMAL}, 
      #{telegramChatRecordId,jdbcType=BIGINT}, #{telegramBotName,jdbcType=CHAR}, #{noticeCount,jdbcType=INTEGER}, 
      #{timeUnitOfNoticeInterval,jdbcType=INTEGER}, #{timeRangeOfNoticeInterval,jdbcType=INTEGER}, 
      #{validTime,jdbcType=TIMESTAMP}, #{noticeTime,jdbcType=TIMESTAMP}, #{nextNoticeTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{isDelete,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    insert into crypto_coin_price_notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="coinType != null">
        coin_type,
      </if>
      <if test="currencyType != null">
        currency_type,
      </if>
      <if test="maxPrice != null">
        max_price,
      </if>
      <if test="minPrice != null">
        min_price,
      </if>
      <if test="timeUnitOfDataWatch != null">
        time_unit_of_data_watch,
      </if>
      <if test="timeRangeOfDataWatch != null">
        time_range_of_data_watch,
      </if>
      <if test="fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage,
      </if>
      <if test="telegramChatRecordId != null">
        telegram_chat_record_id,
      </if>
      <if test="telegramBotName != null">
        telegram_bot_name,
      </if>
      <if test="noticeCount != null">
        notice_count,
      </if>
      <if test="timeUnitOfNoticeInterval != null">
        time_unit_of_notice_interval,
      </if>
      <if test="timeRangeOfNoticeInterval != null">
        time_range_of_notice_interval,
      </if>
      <if test="validTime != null">
        valid_time,
      </if>
      <if test="noticeTime != null">
        notice_time,
      </if>
      <if test="nextNoticeTime != null">
        next_notice_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="coinType != null">
        #{coinType,jdbcType=BIGINT},
      </if>
      <if test="currencyType != null">
        #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="maxPrice != null">
        #{maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="minPrice != null">
        #{minPrice,jdbcType=DECIMAL},
      </if>
      <if test="timeUnitOfDataWatch != null">
        #{timeUnitOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="timeRangeOfDataWatch != null">
        #{timeRangeOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="fluctuationSpeedPercentage != null">
        #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="telegramChatRecordId != null">
        #{telegramChatRecordId,jdbcType=BIGINT},
      </if>
      <if test="telegramBotName != null">
        #{telegramBotName,jdbcType=CHAR},
      </if>
      <if test="noticeCount != null">
        #{noticeCount,jdbcType=INTEGER},
      </if>
      <if test="timeUnitOfNoticeInterval != null">
        #{timeUnitOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="timeRangeOfNoticeInterval != null">
        #{timeRangeOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="validTime != null">
        #{validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="noticeTime != null">
        #{noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nextNoticeTime != null">
        #{nextNoticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultType="java.lang.Long">
    select count(*) from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update crypto_coin_price_notice
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.coinType != null">
        coin_type = #{row.coinType,jdbcType=BIGINT},
      </if>
      <if test="row.currencyType != null">
        currency_type = #{row.currencyType,jdbcType=INTEGER},
      </if>
      <if test="row.maxPrice != null">
        max_price = #{row.maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="row.minPrice != null">
        min_price = #{row.minPrice,jdbcType=DECIMAL},
      </if>
      <if test="row.timeUnitOfDataWatch != null">
        time_unit_of_data_watch = #{row.timeUnitOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="row.timeRangeOfDataWatch != null">
        time_range_of_data_watch = #{row.timeRangeOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="row.fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage = #{row.fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="row.telegramChatRecordId != null">
        telegram_chat_record_id = #{row.telegramChatRecordId,jdbcType=BIGINT},
      </if>
      <if test="row.telegramBotName != null">
        telegram_bot_name = #{row.telegramBotName,jdbcType=CHAR},
      </if>
      <if test="row.noticeCount != null">
        notice_count = #{row.noticeCount,jdbcType=INTEGER},
      </if>
      <if test="row.timeUnitOfNoticeInterval != null">
        time_unit_of_notice_interval = #{row.timeUnitOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="row.timeRangeOfNoticeInterval != null">
        time_range_of_notice_interval = #{row.timeRangeOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="row.validTime != null">
        valid_time = #{row.validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.noticeTime != null">
        notice_time = #{row.noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.nextNoticeTime != null">
        next_notice_time = #{row.nextNoticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.createTime != null">
        create_time = #{row.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.isDelete != null">
        is_delete = #{row.isDelete,jdbcType=BIT},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update crypto_coin_price_notice
    set id = #{row.id,jdbcType=BIGINT},
      coin_type = #{row.coinType,jdbcType=BIGINT},
      currency_type = #{row.currencyType,jdbcType=INTEGER},
      max_price = #{row.maxPrice,jdbcType=DECIMAL},
      min_price = #{row.minPrice,jdbcType=DECIMAL},
      time_unit_of_data_watch = #{row.timeUnitOfDataWatch,jdbcType=INTEGER},
      time_range_of_data_watch = #{row.timeRangeOfDataWatch,jdbcType=INTEGER},
      fluctuation_speed_percentage = #{row.fluctuationSpeedPercentage,jdbcType=DECIMAL},
      telegram_chat_record_id = #{row.telegramChatRecordId,jdbcType=BIGINT},
      telegram_bot_name = #{row.telegramBotName,jdbcType=CHAR},
      notice_count = #{row.noticeCount,jdbcType=INTEGER},
      time_unit_of_notice_interval = #{row.timeUnitOfNoticeInterval,jdbcType=INTEGER},
      time_range_of_notice_interval = #{row.timeRangeOfNoticeInterval,jdbcType=INTEGER},
      valid_time = #{row.validTime,jdbcType=TIMESTAMP},
      notice_time = #{row.noticeTime,jdbcType=TIMESTAMP},
      next_notice_time = #{row.nextNoticeTime,jdbcType=TIMESTAMP},
      create_time = #{row.createTime,jdbcType=TIMESTAMP},
      is_delete = #{row.isDelete,jdbcType=BIT}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    update crypto_coin_price_notice
    <set>
      <if test="coinType != null">
        coin_type = #{coinType,jdbcType=BIGINT},
      </if>
      <if test="currencyType != null">
        currency_type = #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="maxPrice != null">
        max_price = #{maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="minPrice != null">
        min_price = #{minPrice,jdbcType=DECIMAL},
      </if>
      <if test="timeUnitOfDataWatch != null">
        time_unit_of_data_watch = #{timeUnitOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="timeRangeOfDataWatch != null">
        time_range_of_data_watch = #{timeRangeOfDataWatch,jdbcType=INTEGER},
      </if>
      <if test="fluctuationSpeedPercentage != null">
        fluctuation_speed_percentage = #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      </if>
      <if test="telegramChatRecordId != null">
        telegram_chat_record_id = #{telegramChatRecordId,jdbcType=BIGINT},
      </if>
      <if test="telegramBotName != null">
        telegram_bot_name = #{telegramBotName,jdbcType=CHAR},
      </if>
      <if test="noticeCount != null">
        notice_count = #{noticeCount,jdbcType=INTEGER},
      </if>
      <if test="timeUnitOfNoticeInterval != null">
        time_unit_of_notice_interval = #{timeUnitOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="timeRangeOfNoticeInterval != null">
        time_range_of_notice_interval = #{timeRangeOfNoticeInterval,jdbcType=INTEGER},
      </if>
      <if test="validTime != null">
        valid_time = #{validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="noticeTime != null">
        notice_time = #{noticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nextNoticeTime != null">
        next_notice_time = #{nextNoticeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNotice">
    update crypto_coin_price_notice
    set coin_type = #{coinType,jdbcType=BIGINT},
      currency_type = #{currencyType,jdbcType=INTEGER},
      max_price = #{maxPrice,jdbcType=DECIMAL},
      min_price = #{minPrice,jdbcType=DECIMAL},
      time_unit_of_data_watch = #{timeUnitOfDataWatch,jdbcType=INTEGER},
      time_range_of_data_watch = #{timeRangeOfDataWatch,jdbcType=INTEGER},
      fluctuation_speed_percentage = #{fluctuationSpeedPercentage,jdbcType=DECIMAL},
      telegram_chat_record_id = #{telegramChatRecordId,jdbcType=BIGINT},
      telegram_bot_name = #{telegramBotName,jdbcType=CHAR},
      notice_count = #{noticeCount,jdbcType=INTEGER},
      time_unit_of_notice_interval = #{timeUnitOfNoticeInterval,jdbcType=INTEGER},
      time_range_of_notice_interval = #{timeRangeOfNoticeInterval,jdbcType=INTEGER},
      valid_time = #{validTime,jdbcType=TIMESTAMP},
      notice_time = #{noticeTime,jdbcType=TIMESTAMP},
      next_notice_time = #{nextNoticeTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_delete = #{isDelete,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="demo.finance.cryptoCoin.notice.pojo.po.CryptoCoinPriceNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from crypto_coin_price_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectValidNoticeSetting" resultMap="BaseResultMap">
    select
      *
    from
      crypto_coin_price_notice
    <where>
      1=1
      and is_delete = false
      and notice_count &gt; 0
      and valid_time &gt;= #{now}
      and next_notice_time &lt;= #{now} 
    </where>
  </select>
</mapper>